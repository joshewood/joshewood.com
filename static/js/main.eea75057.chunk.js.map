{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","entranceAnimation","beginEntrance","CTAEffect","changeCTAEffect","hasLoaded","setHasLoaded","useEffect","location","useLocation","className","pathname","TransitionGroup","CSSTransition","key","classNames","timeout","exact","path","onClick","setTimeout","window","assign","type","to","href","src","autoPlay","loop","muted","url","BrowserApp","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.eea75057.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React, { useState, useEffect, useMemo  } from 'react';\r\nimport logo from './logo.svg';\r\nimport { SocialIcon } from 'react-social-icons';\r\nimport {  \r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link,\r\n  useLocation\r\n} from \"react-router-dom\";\r\nimport {\r\n  TransitionGroup,\r\n  CSSTransition\r\n} from \"react-transition-group\";\r\nimport './App.scss';\r\n\r\nfunction App() {\r\n  const [entranceAnimation, beginEntrance] = useState(false);\r\n  const [fastForward, setFastForward] =  useState(false);\r\n  const [CTAEffect, changeCTAEffect] = useState('Empty');\r\n  const [hasLoaded, setHasLoaded] = useState(false);\r\n  let downloadResume = () => {\r\n    changeCTAEffect('Engaged');\r\n    setTimeout(()=> {\r\n      changeCTAEffect('Fade');\r\n      setTimeout(()=> {\r\n        changeCTAEffect('Empty');\r\n      }, 500)\r\n    }, 800)\r\n\r\n    window.location.assign('resume.pdf');\r\n  };\r\n  useEffect(() => {\r\n    setHasLoaded(true);\r\n    beginEntrance(true);\r\n  }, []);  \r\n  let location = useLocation();\r\n  return (<div className={`App${(hasLoaded) ? ' Loaded' : ''}${(location.pathname == '/') ? ' Home' : ''}`}>\r\n      <TransitionGroup>\r\n        <CSSTransition\r\n          key={location.key}\r\n          classNames=\"slide\"\r\n          timeout={900}\r\n        >\r\n          <Switch location={location}>\r\n            <Route exact path=\"/\">\r\n            <div>\r\n              <div className={`IntroPanel${(entranceAnimation) ? ' Enter' : ''}`}>\r\n                <div className={`CTAContainer ResumeContainer ${CTAEffect}`} onClick={downloadResume}>\r\n                  <hr className=\"BorderDecoration Top\"/>  \r\n                  <h1>Hey, my name's <span className=\"Accent\">Josh</span>,</h1>\r\n                  <button type=\"button\" className=\"HomeCTA\">R&eacute;sum&eacute;</button>\r\n                  <hr className=\"BorderDecoration\"/>  \r\n                </div>\r\n                \r\n                <Link className=\"CTAContainer PortfolioLinkContainer\" to=\"/portfolio\">\r\n                  <hr className=\"BorderDecoration Top\"/>  \r\n                  <h2>I'm a developer</h2>\r\n                  <button type=\"button\" className=\"HomeCTA SecondaryCTA\">Portfolio</button>\r\n                  <hr className=\"BorderDecoration\"/>\r\n                </Link>\r\n              </div>\r\n              \r\n            </div>\r\n            </Route>\r\n            <Route path=\"/portfolio\">\r\n              <div className=\"WorkPanel\">\r\n                \r\n                <div className={`CTAContainer Short InnerCard ResumeContainer ${CTAEffect}`} onClick={() => {window.location.assign('https://www.dawnofwar.com')}}>\r\n                  <hr className=\"BorderDecoration Top\"/>  \r\n                  <a href=\"https://www.dawnofwar.com\">www.dawnofwar.com</a>\r\n                  <img src=\"/portfolio/thumbnail-dawn-of-war.png\"/>\r\n                  <video className=\"VideoPreview\" autoPlay loop muted src=\"/dawnofwar.mp4\"></video>\r\n                  <hr className=\"BorderDecoration\"/>\r\n                </div>\r\n                \r\n                <div className={`CTAContainer ResumeContainer ${CTAEffect}`} onClick={() => {window.location.assign('https://www.hardrocksocialcasino.com')}}>\r\n                  <hr className=\"BorderDecoration Top\"/>  \r\n                  <div className=\"SupportHeader\" >Greentube Pro</div>\r\n                  <div className=\"GreentubeProTooltip\">\r\n                    <ul className=\"GreentubeProClients\">\r\n                      <li className=\"InnerCard\">\r\n                        <a href=\"https://www.hardrocksocialcasino.com\">\r\n                          <div>hardrocksocialcasino.com</div>\r\n                          <img src=\"/portfolio/thumbnail-hard-rock.png\"/>\r\n                          <video className=\"VideoPreview\" autoPlay loop muted src=\"/hardrock.mp4\"></video>\r\n                        </a>\r\n                      </li>\r\n                      <li className=\"InnerCard\">\r\n                        <a href=\"https://online.foxwoods.com\">\r\n                          <div>online.foxwoods.com</div>\r\n                          <img src=\"/portfolio/thumbnail-foxwoods.png\"/>\r\n                          <video className=\"VideoPreview\" autoPlay loop muted src=\"/foxwoods.mp4\"></video>\r\n                        </a>\r\n                      </li>\r\n                      <li className=\"InnerCard\">\r\n                        <a href=\"https://play.star.com.au\">\r\n                          <div>play.star.com.au</div>\r\n                          <img src=\"/portfolio/thumbnail-starplay.png\"/>\r\n                          <video className=\"VideoPreview\" autoPlay loop muted src=\"/star.mp4\"></video>\r\n                        </a>\r\n                      </li>\r\n                    </ul>\r\n                  </div>\r\n                  <hr className=\"BorderDecoration\"/>\r\n                </div>\r\n\r\n                <div className={`CTAContainer Short SocialLinks`}>\r\n                  <hr className=\"BorderDecoration Top\"/>  \r\n                  <ul className=\"SocialLinks\">\r\n                    <li>\r\n                      <SocialIcon url=\"/resume.pdf\"/>\r\n                    </li>\r\n                    <li>\r\n                      <SocialIcon url=\"https://www.linkedin.com/in/agamedesigner/\" />\r\n                    </li>\r\n                    <li>\r\n                      <SocialIcon url=\"mailto:gdjoshwood@gmail.com\" />\r\n                    </li>\r\n                    <li>\r\n                      <SocialIcon url=\"https://github.com/joshewood/\"/>\r\n                    </li>\r\n                  </ul>\r\n                  <hr className=\"BorderDecoration\"/>\r\n                </div>\r\n              </div>\r\n            </Route>\r\n          </Switch>\r\n        </CSSTransition>\r\n      </TransitionGroup>        \r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nconst BrowserApp = () => <Router><App/></Router>\r\n\r\nexport default BrowserApp;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}